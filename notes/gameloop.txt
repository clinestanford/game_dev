 _____ _             ____                        _                      
|_   _| |__   ___   / ___| __ _ _ __ ___   ___  | |    ___   ___  _ __  
  | | | '_ \ / _ \ | |  _ / _` | '_ ` _ \ / _ \ | |   / _ \ / _ \| '_ \ 
  | | | | | |  __/ | |_| | (_| | | | | | |  __/ | |__| (_) | (_) | |_) |
  |_| |_| |_|\___|  \____|\__,_|_| |_| |_|\___| |_____\___/ \___/| .__/ 
                                                                 |_|    

1. Initialize Game:
	load graphics, models, animations, etc
	take initial time stamp; call it previous time-stamp
2. Process Input
3. Update Game Logic:
	take current time-stamp; comput elapsed time
	Update based on elapsed time
4. Render Game State
5. Move current time-stamp to previous time-stamp
	if fixed frame-rate, use spin-lock to wait until frame-time expires
6. If done, move to Step 7, otherwise return to Step 2
7. Termination


Frame Rate: Measured in Hz; frames per second
Frame Time: Amount of time within a frame (delta t)
	if 30 fps, each frame has 33.33 ms for everything

Wall-Clock time: real-world elapsed time
simulation time: how much game-play time has passed
	may be the exact same thing but perhaps not

Moving objects:
	shouldn't have a certain amount to move every frame,
	X2 = X1 + vel. * elapsedTime 